{"version":3,"sources":["dd3Test.js"],"names":["width","height","projection","d3","geoAlbersUsa","translate","scale","path","geoPath","color","scaleLinear","range","svg","select","append","attr","csv","covid_us_data","covid_data","domain","json","selectAll","data","features","enter","style"],"mappings":";;AAAA;;AACA;;;;AADqD;AAErD,cAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;;;AACA,IAAIA,KAAK,GAAG,GAAZ;AACA,IAAIC,MAAM,GAAG,GAAb,EAEA;;AACA,IAAIC,UAAU,GAAGC,EAAE,CAACC,YAAH,GACTC,SADS,CACC,CAACL,KAAK,GAAC,CAAP,EAAUC,MAAM,GAAC,CAAjB,CADD,EACyB;AADzB,CAETK,KAFS,CAEH,CAAC,IAAD,CAFG,CAAjB,EAEgC;AAEhC;;AACA,IAAIC,IAAI,GAAGJ,EAAE,CAACK,OAAH,GAA2B;AAA3B,CACJN,UADI,CACOA,UADP,CAAX,EACgC;AAGhC;;AACA,IAAIO,KAAK,GAAGN,EAAE,CAACO,WAAH,GACNC,KADM,CACA,CAAC,kBAAD,EAAoB,iBAApB,EAAsC,eAAtC,EAAsD,gBAAtD,CADA,CAAZ,EAGA;;AACA,IAAMC,GAAG,GAAGT,EAAE,CAACU,MAAH,CAAU,MAAV,EACRC,MADQ,CACD,KADC,EAERC,IAFQ,CAEH,OAFG,EAEMf,KAFN,EAGRe,IAHQ,CAGH,QAHG,EAGOd,MAHP,CAAZ,EAKA;AACA;AACA;AACA;AACA;AAEA;;AACAE,EAAE,CAACa,GAAH,CAAOC,mBAAP,EAAsB,UAASC,UAAT,EAAqB;AACzCT,EAAAA,KAAK,CAACU,MAAN,CAAa,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,CAAb,EADyC,CAChB;AAC1B;;AACAhB,EAAAA,EAAE,CAACiB,IAAH,CAAQ,gBAAR,EAA0B,UAASA,IAAT,EAAc;AACvCR,IAAAA,GAAG,CAACS,SAAJ,CAAc,MAAd,EACEC,IADF,CACOF,IAAI,CAACG,QADZ,EAEEC,KAFF,GAGEV,MAHF,CAGS,MAHT,EAIEC,IAJF,CAIO,GAJP,EAIYR,IAJZ,EAKEkB,KALF,CAKQ,QALR,EAKkB,MALlB,EAMEA,KANF,CAMQ,cANR,EAMwB,GANxB,EADuC,CAQtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAnBD;AAoBA,CAvBD","file":"dd3Test.9c24cb99.js","sourceRoot":"..\\src","sourcesContent":["import covid_us_data from '../static/covid19_us.csv' // import covid 19 US data\r\nimport sunshineData from '../static/sunshine.csv'\r\n\"use strict\"\r\n\r\n// var us = d3.json(\"https://unpkg.com/us-atlas@1/us/10m.json\")\r\n// var path = d3.geoPath();\r\n//\r\n// var width = 960;\r\n// var height = 600;\r\n//\r\n// var margin = { top: 50, right: 35, bottom: 50, left: 50 },\r\n// w = 960 - (margin.left + margin.right),\r\n// h = 600 - (margin.top + margin.bottom);\r\n// var legendSpace = 130;\r\n//\r\n// function drawDD3() {\r\n//   // Create SVG\r\n//   // let svg = d3.select(DOM.svg(width, height));\r\n//   map_svg = d3.select('#dd3')\r\n//          .append('svg')\r\n//           .attr(\"id\", \"dd3-chart\")\r\n//           .attr(\"width\", width)\r\n//           .attr(\"height\", height);\r\n//           // .attr(\"width\", w + margin.left + margin.right + legendSpace)\r\n//           // .attr(\"height\", h + margin.top + margin.bottom)\r\n//\r\n//   g = map_svg.append(\"g\");\r\n//\r\n//   // Bind TopoJSON data\r\n//   g.selectAll(\"path\")\r\n//       .data(topojson.feature(us, us.objects.counties).features) // Bind TopoJSON data elements\r\n//     // pass through what objects you want to use -- in this case we are doing county lines\r\n//       .enter().append(\"path\")\r\n//       .attr(\"d\", path)\r\n//       .style(\"fill\", \"white\")\r\n//       .style(\"stroke\", \"black\");\r\n//   // return svg.node();\r\n// }\r\n//\r\n// // d3.csv(sunshineData).then(function(data) {\r\n// //   drawDD3();\r\n// // });\r\n// // svg.node();\r\n// drawDD3();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//Width and height of map\r\nvar width = 960;\r\nvar height = 500;\r\n\r\n// D3 Projection\r\nvar projection = d3.geoAlbersUsa()\r\n\t\t\t\t   .translate([width/2, height/2])    // translate to center of screen\r\n\t\t\t\t   .scale([1000]);          // scale things down so see entire US\r\n\r\n// Define path generator\r\nvar path = d3.geoPath()               // path generator that will convert GeoJSON to SVG paths\r\n\t\t  \t .projection(projection);  // tell path generator to use albersUsa projection\r\n\r\n\r\n// Define linear scale for output\r\nvar color = d3.scaleLinear()\r\n\t\t\t  .range([\"rgb(213,222,217)\",\"rgb(69,173,168)\",\"rgb(84,36,55)\",\"rgb(217,91,67)\"]);\r\n\r\n//Create SVG element and append map to the SVG\r\nconst svg = d3.select('#dd3')\r\n\t\t\t.append(\"svg\")\r\n\t\t\t.attr(\"width\", width)\r\n\t\t\t.attr(\"height\", height);\r\n\r\n// Append Div for tooltip to SVG\r\n// var div = d3.select(\"#dd3\")\r\n// \t\t    .append(\"div\")\r\n//     \t\t.attr(\"class\", \"tooltip\")\r\n//     \t\t.style(\"opacity\", 0);\r\n\r\n// Load in my states data!\r\nd3.csv(covid_us_data, function(covid_data) {\r\n  color.domain([0,1,2,3]); // setting the range of the input data\r\n\t// Load GeoJSON data and merge with states data\r\n\td3.json(\"us-states.json\", function(json){\r\n\t\tsvg.selectAll(\"path\")\r\n\t\t\t.data(json.features)\r\n\t\t\t.enter()\r\n\t\t\t.append(\"path\")\r\n\t\t\t.attr(\"d\", path)\r\n\t\t\t.style(\"stroke\", \"#fff\")\r\n\t\t\t.style(\"stroke-width\", \"1\");\r\n\t\t\t// .style(\"fill\", function(d) {\r\n\t\t\t// \t// Get data value\r\n\t\t\t// \t// var value = d.properties.visited;\r\n\t\t\t// \tif (value) {\r\n\t\t\t// \t\t//If value exists…\r\n\t\t\t// \t\treturn color(value);\r\n\t\t\t// \t} else {\r\n\t\t\t// \t\t//If value is undefined…\r\n\t\t\t// \t\treturn \"rgb(213,222,217)\";\r\n\t\t\t// \t}\r\n\t\t\t// });\r\n\t});\r\n})\r\n"]}